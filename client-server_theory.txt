1) Что такое клиент?
Клиент — это программа или устройство, которое отправляет запросы к серверу для получения данных или выполнения операций. Примером клиента может быть веб-браузер, который запрашивает веб-страницы у веб-сервера.

2) Что такое сервер?
Сервер — это аппаратное или программное обеспечение, которое обрабатывает запросы от клиентов и предоставляет им ресурсы или услуги. Примером сервера может быть веб-сервер, который хранит и обслуживает веб-страницы.

3) Что такое Interface?
Интерфейс — это набор правил и методов, которые определяют, как различные компоненты системы взаимодействуют друг с другом. Примером интерфейса может быть API (Application Programming Interface), который позволяет различным программам обмениваться данными.

4) Что такое толстый клиент?
Толстый клиент — это приложение, которое выполняет большую часть обработки данных на локальном компьютере пользователя. Реальным примером толстого клиента может быть Microsoft Outlook, который загружает и обрабатывает данные локально.

5) Что такое тонкий клиент?
Тонкий клиент — это приложение, которое выполняет минимальные функции обработки данных на локальном устройстве и в основном зависит от сервера. Примером тонкого клиента может быть веб-приложение, такое как Google Docs, которое требует постоянного подключения к интернету для работы.

6) Какие бывают уровни клиент-серверной архитектуры?
Уровни клиент-серверной архитектуры включают:
Одноуровневая архитектура
Двухуровневая архитектура
Трехуровневая архитектура
Многоуровневая архитектура

7) Что такое балансировщик нагрузки (балансировщики)?
Балансировщик нагрузки — это система, распределяющая входящие сетевые или прикладные трафики на несколько серверов для повышения надежности и отказоустойчивости системы.

8) Горячий резерв серверов? Холодный резерв серверов? Приведи реальный пример.
Горячий резерв — это сервер, который постоянно работает и может сразу заменить основной сервер в случае сбоя. Пример: резервный сервер в дата-центре, который автоматически активируется при отказе основного сервера.
Холодный резерв — это сервер, который включается вручную только при необходимости замены основного сервера. Пример: резервный сервер, который хранится в запасе и активируется только в случае сбоя основного оборудования.

9) Чем web service отличается от web server? Приведи пример.
Web service — это интерфейс и программный комплекс, обрабатывающий запросы и предоставляющий функциональность через интернет. Пример: RESTful API для получения данных о погоде.
Web server — это аппаратное или программное обеспечение, которое обслуживает веб-страницы. Пример: Apache HTTP Server.

10) Что такое микросервисная архитектура? Приведи реальный пример использования.
Микросервисная архитектура — это подход к разработке программного обеспечения, при котором приложения состоят из небольших независимых сервисов, взаимодействующих друг с другом через API. Реальным примером использования является Netflix, который использует микросервисы для управления различными аспектами своего сервиса потокового видео.

11) Прокси-сервер? Приведи пример.
Прокси-сервер — это промежуточное звено между пользователем и сайтом. Если пользователь не использует прокси-сервер, веб-сайт может определить его местоположение по IP-адресу.

Прокси-сервер выполняет разные задачи. В зависимости от типа и настроек он может кэшировать информацию или фильтровать веб-контент.

Для чего нужен proxy:
обеспечивает анонимность — прокси меняет IP-адрес, поэтому сторонним лицам сложнее отследить местоположение пользователя;
блокирует сайты — можно настроить его так, чтобы ограничить доступ к определенным ресурсам, например, социальным сетям в офисе;
ускоряет работу — за счет кэширования данных страницы загружаются быстрее;
фильтрует контент — прокси позволяет отсеивать нежелательную рекламу и опасные сайты.
Прокси-сервер также можно использовать для бизнес-задач:
контролировать трафик — компании могут отслеживать запросы сотрудников и анализировать их активность в интернете;
повышать безопасность — он защищает от утечек данных, делая взаимодействие с сетью более безопасным;
оптимизировать рекламу — с его помощью можно собирать данные о предпочтениях пользователей и настраивать рекламу точнее.

12) VPN? Приведи пример.
VPN (Virtual Private Network) — это технология, которая создает защищенное соединение между пользователем и интернетом. Пример: использование NordVPN для защиты интернет-трафика и анонимности в сети.

13) Что такое атака MAN in the Middle?
Атака Man in the Middle (MitM) — это атака, при которой злоумышленник перехватывает и изменяет коммуникацию между двумя сторонами без их ведома.

14) Что такое API?
API (Application Programming Interface) — это набор правил и протоколов, позволяющий различным программам взаимодействовать друг с другом.По сути, это способ, с помощью которого один программный компонент может "общаться" с другим. APIs используются повсеместно, от веб-сервисов до настольных приложений, чтобы обеспечивать интеграцию и работу между различными системами и платформами. API предоставляет методы и функции, которые разработчики могут использовать для выполнения определенных задач, таких как доступ к данным, управление пользователями или обмен сообщениями.

15) Что такое REST API?
REST API (Representational State Transfer Application Programming Interface) — это архитектурный стиль для создания веб-сервисов, которые могут взаимодействовать через HTTP-протокол. REST API позволяют различным приложениям обмениваться данными и выполнять операции, используя стандартные HTTP-методы: GET, POST, PUT, DELETE и др.

Простыми словами, REST API позволяют получать доступ к ресурсам сервера (данные, функции и т.д.) через URL-адреса, отправляя запросы и получая ответы в формате JSON или XML. Они широко используются благодаря своей простоте и гибкости, и помогают обеспечить легкую интеграцию между различными системами.

16)Требования к архитектуре REST.
Принципы проектирования REST API (Если выполняются все принципы, то RESful) Теперь, когда мы рассмотрели основы и узнали об определении REST API, давайте перейдем к шести принципам REST, которые определяют дизайн API:

Клиент-сервер
Принцип REST основан на концепции, согласно которой клиент и сервер должны быть изолированы друг от друга и иметь возможность развиваться независимо. Таким образом, вы можете улучшить управляемость на многочисленных платформах и увеличить масштабируемость за счет оптимизации серверных компонентов, поскольку проблемы пользовательского интерфейса отделены от проблем хранения данных.

Stateless
Этот принцип REST требует, чтобы API не сохраняли состояние, что позволяет выполнять независимые вызовы. Более того, каждый вызов включает в себя данные, необходимые для его эффективного завершения. Другими словами, каждый запрос, отправляемый клиентом на сервер, должен включать всю информацию, необходимую для обработки запроса.

Кэшируемый
Поскольку API без сохранения состояния может увеличить накладные расходы на запросы, управляя огромными нагрузками входящих и исходящих вызовов, дизайн REST API должен хранить кэшируемые данные. Согласно этому принципу проектирования API, данные в ответе должны быть косвенно или классифицированы как кэшируемые или некэшируемые. Если ответ кэшируется, кэшу клиента предоставляется право повторно использовать эти данные ответа для аналогичных запросов в будущем.

Единый интерфейс
Чтобы отделить клиент от сервера, вам необходимо иметь единый интерфейс, который позволяет автономно разрабатывать приложение без жесткой привязки его сервисов, моделей и действий к самому уровню API. Этот принцип проектирования оптимизирует всю архитектуру системы и повышает наглядность. коммуникаций.Некоторые архитектурные элементы управления требуют управления производительностью элементов в архитектуре REST API для достижения единообразного интерфейса. Архитектура REST API определяет принципы REST с помощью четырех элементов управления интерфейсом, включая идентификацию ресурсов, управление ресурсами посредством представлений, обеспечение самоописательной связи и превращение гипермедиа в механизм состояния приложения.

Многоуровневая система
Архитектура REST API включает в себя несколько уровней, которые работают вместе, создавая иерархию, помогающую создать более масштабируемое и гибкое приложение. Благодаря многоуровневой системе приложение имеет более высокий уровень безопасности, поскольку компоненты каждого уровня не могут взаимодействовать за пределами последующего уровня. Более того, он балансирует нагрузки и предлагает общие кэши для стимулирования Масштабируемость. Система многоуровневой архитектуры REST API обладает большей стабильностью, поскольку ограничивает производительность компонентов. так что каждый компонент не может «видеть» дальше непосредственного слоя, с которым он смешивается.

Код по требованию
Принцип REST обеспечивает передачу кода или апплетов через API, используемый внутри приложения. Определение REST API позволяет расширять функциональность клиента путем загрузки и реализации кода в форме апплетов или сценариев. Это оптимизирует работу клиентов за счет уменьшения количества функций, которые необходимо предварительно реализовать. Большую часть времени сервер возвращает статическое представление ресурса в формате XML или JSON. Но при необходимости серверы могут доставить клиенту исполняемый код.

17) Что такое CRUD?
CRUD (Create, Read, Update, Delete) — это набор операций, которые можно выполнять над данными в приложении.

18) Чем GET отличается от POST?
GET используется для получения данных с сервера и передает параметры через URL. POST используется для отправки данных на сервер и передает параметры в теле запроса.

19) Чем POST отличается от PUT?
POST используется для создания нового ресурса на сервере, тогда как PUT используется для полного обновления существующего ресурса.

20) Чем PUT отличается от PATCH?
PUT заменяет весь ресурс на новый, тогда как PATCH обновляет только часть ресурса.

21) Можно ли в POST передать данные и через URL и через Body?
Да, но это не рекомендуется. Хотя технически возможно передать данные как в URL, так и в теле запроса, это может вызвать путаницу и не является стандартной практикой.

22) Можно ли с помощью URLa передать данные на сервер?
Да, данные могут быть переданы на сервер через URL, обычно в виде параметров запроса.

23) Что такое идемпотентность?
Идемпотентность — это свойство операции, при котором многократное выполнение одной и той же операции приводит к одному и тому же результату. Например, HTTP методы PUT и DELETE являются идемпотентными.

24) В чем разница между безопасностью и идемпотентностью?
Безопасность означает, что метод не изменяет состояние сервера (например, GET), а идемпотентность означает, что повторные вызовы одной и той же операции дают один и тот же результат (например, DELETE).

25) Что такое Ad point?
Ad point может означать точку размещения рекламы или место, где реклама может быть показана пользователю. Однако точное определение зависит от контекста.

26) Что такое статус код сервера?
Статус код сервера — это трехзначный числовой код, который сервер возвращает клиенту в ответ на HTTP-запрос, указывая на результат обработки запроса.

27) Какие существуют группы статус кодов?
Статус коды делятся на пять групп:
1xx: Информационные
2xx: Успешные
3xx: Перенаправления
4xx: Ошибки клиента
5xx: Ошибки сервера

28) Какие ты знаешь 5 из 400?
400 Bad Request («неправильный, некорректный запрос»)
401 Unauthorized («не авторизован»)
402 Payment Required («необходима оплата») — зарезервировано для использования в будущем
403 Forbidden («запрещено (не уполномочен)»)
404 Not Found («не найдено»)[3];
405 Method Not Allowed («метод не поддерживается»)
418 I’m a teapot («я — чайник»);

29) Какие ты знаешь 5 из 500?
500 Internal Server Error («внутренняя ошибка сервера»)
501 Not Implemented («не реализовано»)
502 Bad Gateway («плохой, ошибочный шлюз»)
503 Service Unavailable («сервис недоступен»)
504 Gateway Timeout («шлюз не отвечает»)
505 HTTP Version Not Supported («версия HTTP не поддерживается»)

30) Какие ты знаешь Headers в Request?
User-Agent: информация о клиентском приложении.
Authorization: учетные данные для аутентификации.
Content-Type: тип данных, отправляемых в теле запроса.
Accept: типы данных, которые клиент готов принять.
Referer: URL страницы, с которой был сделан запрос.

31) Какие ты знаешь Headers в Response?
Content-Type: Указывает тип данных, возвращаемых сервером.
Content-Length: Указывает размер тела ответа.
Cache-Control: Указывает правила кэширования для клиента.
Last-Modified: Указывает дату и время последнего изменения ресурса.
Set-Cookie: Используется для установки cookies на клиенте.

32) Из чего состоит запрос HTTP - реквест?
Запрос HTTP (реквест) состоит из:
Стартовая строка (метод, URI, версия протокола)
Заголовки
Тело запроса (опционально)

33) Из чего состоят ответы HTTP - респонс?
Ответы HTTP (респонс) состоят из:
Строка статуса (версия протокола, код состояния, пояснение)
Заголовки
Тело ответа (опционально)

34) Что такое и какая разница, Идентификация, Аутентификация, Авторизация?
Идентификация: Процесс проверки, есть ли такой логин в базе.
Аутентификация: Проверка подлинности пользователя, подтверждение его личности.
Авторизация: Определение прав доступа пользователя к ресурсам системы.

35) Что происходит при валидации на сервере?
При валидации на сервере данные проверяются на корректность и соответствие заданным требованиям. Если данные не проходят валидацию, сервер может вернуть сообщение об ошибке или запросить исправления.

36) Что происходит при валидации на клиенте?
При валидации на клиенте данные проверяются до их отправки на сервер. Это позволяет предотвратить отправку некорректных данных и улучшить пользовательский опыт.

37) Что такое токен?
Токен — это небольшой фрагмент данных, используемый для аутентификации и авторизации пользователя при взаимодействии с сервером.

38) Где хранится токен?
Токен может храниться в:
Local Storage
Session Storage
Cookies

39) Что такое токен авторизации? Объясни процесс токен авторизации.
Токен авторизации — это токен, который выдается после успешной аутентификации и используется для доступа к защищенным ресурсам. Процесс токен авторизации включает:
Пользователь отправляет свои учетные данные (логин и пароль) на сервер.
Сервер проверяет учетные данные и выдает токен.
Пользователь использует этот токен для доступа к защищенным ресурсам.

40) Может ли быть авторизация без аутентификации? Приведи пример.
Да, авторизация может быть без аутентификации. Примером является доступ к публичным документам в Google Docs, которые можно просматривать без входа в аккаунт.

41) Что такое куки?
Куки — это небольшие текстовые файлы, которые веб-сайты сохраняют на устройстве пользователя для хранения информации о его действиях и предпочтениях.

42) Что такое теплый клиент?
Теплый клиент — это приложение, которое выполняет часть обработки данных на локальном устройстве, но также зависит от сервера для выполнения некоторых функций. Пример: клиентская программа для работы с базой данных, которая кэширует данные локально, но обращается к серверу для обновлений.

43) Что такое холодный клиент?
Холодный клиент — это приложение, которое полностью зависит от сервера для обработки данных и не выполняет никаких операций на локальном устройстве. Пример: веб-приложение, работающее только через браузер без локальной обработки.

44) Что такое кеш?
Кеш — это область памяти или хранилище, используемое для временного хранения данных, чтобы ускорить доступ к ним при последующих запросах.

45) Для чего используется кэширование страниц?
Кэширование страниц используется для уменьшения времени загрузки и снижения нагрузки на сервер, сохраняя статические версии страниц на стороне клиента или в промежуточном хранилище.

46) Для чего необходимо сбрасывать кэш и куки?
Сброс кэша и куки может быть необходим для устранения проблем с отображением страниц, обновления устаревших данных или устранения конфликтов с новыми версиями веб-приложений.

47) Что такое сессия?
Сессия — это период времени, в течение которого пользователь взаимодействует с приложением или веб-сайтом. Сессия может хранить информацию о пользователе и его действиях.

48) Какие стореджи браузера ты знаешь?
Local Storage: Хранит данные без ограничения по времени.
Session Storage: Хранит данные только в течение сеанса (до закрытия вкладки).
Cookies: Хранит небольшие объемы данных и может иметь срок действия.

49) В чем разница между Session Storage и Local Storage?
Session Storage: Данные хранятся только до закрытия вкладки или окна браузера.
Local Storage: Данные сохраняются даже после закрытия браузера и могут быть доступны при следующем запуске.

50) Для чего необходимо сбрасывать кэш и куки?
Сброс кэша и куки помогает решить проблемы с отображением веб-страниц, устранить конфликты с устаревшими данными и обеспечить корректное функционирование новых версий приложений

51) Что такое REST?
REST (Representational State Transfer) — это архитектурный стиль для разработки веб-сервисов, который использует стандартные HTTP методы (GET, POST, PUT, DELETE) для взаимодействия с ресурсами. RESTful API обеспечивает простоту и гибкость в обмене данными.
52) Что такое SOAP?
SOAP (Simple Object Access Protocol) — это протокол для обмена структурированными сообщениями между компьютерами в сети. Он основан на XML и используется для передачи данных в распределенных системах.

53) Чем REST отличается от SOAP?
Протокол: REST использует стандартные HTTP методы, тогда как SOAP использует собственный протокол.
Формат данных: REST чаще использует JSON и XML, а SOAP работает только с XML.
Сложность: REST проще и легче в реализации, тогда как SOAP более сложен из-за необходимости обработки заголовков и структуры сообщений.

54) JSON Schema - это?
JSON Schema — это формат для описания структуры данных в формате JSON. Он позволяет валидировать данные и документировать API.

55) Что такое JSON и XML?
JSON (JavaScript Object Notation) — это легковесный формат обмена данными, удобный для чтения человеком и легко парсимый для машин.
XML (eXtensible Markup Language) — это разметка, которая используется для хранения и передачи данных, позволяя создавать собственные теги.

56) Каким форматом данных могут быть ключи в JSON?
Ключи в JSON могут быть только строками.

57) Каким форматом данных могут быть значения в JSON?
Значения в JSON могут быть:
Строки
Числа
Булевы значения
Объекты
Массивы
null

58) Какие невалидные типы данных есть у JSON?
Невалидными типами данных в JSON являются:
Функции
Даты (не поддерживаются напрямую)

59) Что такое WSDL?
WSDL (Web Services Description Language) — это язык описания веб-сервисов, который используется для определения функциональности веб-сервиса, включая его методы и параметры.

60) Что такое WADL?
WADL (Web Application Description Language) — это язык описания веб-приложений, который используется для описания RESTful веб-сервисов, включая ресурсы и методы.

61) Что такое логи?
Логи — это хронологическая запись значимой информации о работе системы, которая может включать события, ошибки, предупреждения и другую диагностическую информацию.

62) Что такое логирование?
Логирование — это процесс записи информации о событиях, происходящих в системе, для последующего анализа и диагностики.

63) Перечислите типы логов
Системные логи: Записывают события операционной системы.
Приложенческие логи: Содержат информацию о работе конкретных приложений.
Логи безопасности: Фиксируют события, связанные с безопасностью, такие как попытки доступа.
Логи аудита: Записывают действия пользователей для обеспечения соответствия требованиям.
Ошибочные логи: Содержат информацию об ошибках и сбоях.

64) Механизм записи информации в логи
Запись информации в логи обычно осуществляется через вызовы функций логирования в коде приложения, которые формируют сообщения и записывают их в файл или базу данных.

65) Зачем нужны логи? Какие инструменты знаете для сбора логов?
Логи нужны для диагностики проблем, мониторинга производительности и обеспечения безопасности. Инструменты для сбора логов включают:
ELK Stack (Elasticsearch, Logstash, Kibana)
Splunk
Graylog

66) Привести примеры, когда QA-специалисту необходимо собрать логи с помощью Kibana
При тестировании производительности для анализа задержек и ошибок.
При расследовании ошибок или сбоев в приложении для выявления причин.
Для отслеживания пользовательских действий и поведения при тестировании функциональности.

67) Что такое DNS?
DNS (Domain Name System) — это система, которая преобразует доменные имена в IP-адреса, позволяя пользователям обращаться к ресурсам в интернете по понятным именам.

68) Что такое IP адрес?
IP адрес — это уникальный адрес устройства в сети, который позволяет идентифицировать его и обмениваться данными с другими устройствами.

69) Что такое порт?
Порт — это числовой идентификатор на устройстве, который используется для различения различных сервисов или приложений, работающих на одном IP-адресе.

70) Что такое хост?
Хост — это устройство или сервер, подключенный к сети, который может предоставлять ресурсы или услуги другим устройствам.

71) Что такое URL?
URL (Uniform Resource Locator) — это адрес ресурса в интернете, который указывает его местоположение и способ доступа к нему.

72) В чем разница между URI, URL, URN?
URI (Uniform Resource Identifier): Общий термин для идентификации ресурса.
URL (Uniform Resource Locator): Специфический тип URI, который указывает местоположение ресурса и способ доступа к нему.
URN (Uniform Resource Name): Тип URI, который идентифицирует ресурс по имени без указания его местоположения.

73) Из чего состоит URL адрес?
URL состоит из следующих компонентов:
Протокол (например, http://)
Доменное имя (например, www.example.com)
Порт (опционально)
Путь к ресурсу (например, /path/to/resource)
Параметры запроса (опционально)
Якорь (опционально)

74) Что происходит после ввода запроса в адресной строке?
Браузер проверяет кэш на наличие запрашиваемого ресурса.
Если ресурс не найден в кэше, браузер отправляет DNS-запрос для получения IP-адреса.
Браузер устанавливает соединение с сервером по указанному IP.
Отправляется HTTP-запрос на сервер.
Сервер обрабатывает запрос и отправляет ответ обратно.
Браузер отображает полученный контент.

75) Что такое HTTP?
HTTP (Hypertext Transfer Protocol) — это протокол передачи данных в интернете, который используется для передачи информации между клиентом и сервером.

76) Что такое HTTPS?
HTTPS (Hypertext Transfer Protocol Secure) — это расширение протокола HTTP, которое обеспечивает безопасную передачу данных между клиентом и сервером с использованием шифрования, обычно с помощью протоколов SSL или TLS.

77) SSL и TLS - это?
SSL (Secure Sockets Layer) и TLS (Transport Layer Security) — это криптографические протоколы, которые обеспечивают безопасность передачи данных в интернете, шифруя информацию и защищая её от перехвата.

78) TCP/IP - это?
TCP/IP (Transmission Control Protocol/Internet Protocol) — это набор сетевых протоколов, который используется для подключения устройств в сети и передачи данных через интернет.

79) Уровни TCP/IP?
Уровни модели TCP/IP включают:
Прикладной уровень
Транспортный уровень
Межсетевой уровень
Канальный уровень

80) Уровни OSI?
Уровни модели OSI (Open Systems Interconnection) включают:
Физический уровень
Канальный уровень
Сетевой уровень
Транспортный уровень
Сеансовый уровень
Представительский уровень
Прикладной уровень

81) Что такое FTP?
FTP (File Transfer Protocol) — это протокол для передачи файлов между клиентом и сервером по сети TCP/IP.

82) Какую структуру имеет веб-страница?
Веб-страница имеет структуру, состоящую из HTML-документа, который включает заголовки, тело и различные элементы (теги), такие как заголовки, параграфы, изображения и ссылки.

83) Что такое HTML/CSS/JavaScript?
HTML (Hypertext Markup Language) — язык разметки для создания структуры веб-страниц.
CSS (Cascading Style Sheets) — язык стилей для описания внешнего вида веб-страниц.
JavaScript — язык программирования для создания интерактивных и динамических элементов на веб-страницах.

84) Что такое AJAX?
AJAX (Asynchronous JavaScript and XML) — это набор технологий для асинхронного обмена данными между клиентом и сервером без перезагрузки страницы.

85) Что такое адаптивная и респонсивная верстка?
Адаптивная верстка использует несколько фиксированных макетов для различных устройств.
Респонсивная верстка использует гибкие сетки и медиа-запросы для автоматической адаптации к любому размеру экрана.

86) Как протестировать адаптивную верстку?
Тестирование адаптивной верстки можно проводить с помощью инструментов разработчика в браузере, изменяя размеры окна и проверяя отображение элементов на разных устройствах.

87) Как выполнить Debug страницы в браузере?
Для выполнения отладки страницы в браузере можно использовать инструменты разработчика (обычно открываются нажатием F12), где доступны вкладки для просмотра кода, стилей, консоли ошибок и сетевых запросов.

88) Что такое WebSocket и как проверить обрыв соединения?
WebSocket — это протокол для открытия постоянного двунаправленного соединения между клиентом и сервером, позволяющий обмениваться данными в режиме реального времени. Для проверки обрыва соединения можно использовать события onclose и onerror в JavaScript, которые срабатывают при закрытии соединения или возникновении ошибки.

89) Как узнать схему API проекта?
Схему API проекта можно узнать, изучив документацию API, которая обычно включает описание доступных конечных точек (endpoints), методов (GET, POST и т.д.) и форматов данных. Также можно использовать инструменты, такие как Swagger или Postman, если они доступны.

90) Можно ли начать тестирование, если интерфейс (frontend) ещё не готов? Как?
Да, можно начать тестирование backend-части приложения, используя инструменты для тестирования API (например, Postman или cURL) для проверки логики и функциональности сервера.

91) Какие виды тестирования можно применить только к Web?
Тестирование производительности: Проверка скорости загрузки и отклика веб-приложения.
Тестирование кросс-браузерной совместимости: Проверка работы приложения в различных браузерах.
Тестирование безопасности: Проверка уязвимостей веб-приложения.

92) Каковы есть основные виды уязвимости веб-приложений?
SQL-инъекции
XSS (межсайтовый скриптинг)
CSRF (межсайтовая подделка запроса)
Уязвимости аутентификации
Утечка данных

93) Какие инструменты для тестирования Web performance client-side знаете?
Lighthouse: Инструмент для оценки производительности веб-страниц.
WebPageTest: Сервис для анализа скорости загрузки страниц.
GTmetrix: Инструмент для анализа производительности сайта и рекомендаций по улучшению.
